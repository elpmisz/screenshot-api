services:
  - type: web
    name: screenshot-api
    env: node
    plan: free
    buildCommand: |
      echo "=== Setting up Puppeteer Cache Directory ==="
      mkdir -p /opt/render/.cache/puppeteer
      export PUPPETEER_CACHE_DIR=/opt/render/.cache/puppeteer
      echo "Cache directory: $PUPPETEER_CACHE_DIR"

      echo "=== Installing Dependencies ==="
      npm install

      echo "=== Installing System Chromium (Multiple Methods) ==="
      # Method 1: Try chromium-browser
      echo "Trying chromium-browser..."
      apt-get update && apt-get install -y chromium-browser || echo "chromium-browser not available"

      # Method 2: Try chromium
      echo "Trying chromium..."
      apt-get install -y chromium || echo "chromium not available"

      # Method 3: Try google-chrome-stable
      echo "Trying google-chrome-stable..."
      wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add - && \
      echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list && \
      apt-get update && apt-get install -y google-chrome-stable || echo "google-chrome-stable not available"

      echo "=== Installing Puppeteer Chromium (Multiple Attempts) ==="
      # Try multiple times with different approaches
      echo "Attempt 1: Standard Puppeteer installation"
      PUPPETEER_CACHE_DIR=/opt/render/.cache/puppeteer npx puppeteer browsers install chrome || echo "Standard installation failed"

      echo "Attempt 2: Force download with specific version"
      PUPPETEER_CACHE_DIR=/opt/render/.cache/puppeteer npx puppeteer browsers install chrome@latest || echo "Latest version installation failed"

      echo "Attempt 3: Install with skip download flag reset"
      export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=false
      PUPPETEER_CACHE_DIR=/opt/render/.cache/puppeteer PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=false npx puppeteer browsers install chrome || echo "Skip download reset failed"

      echo "=== Verifying Installation ==="
      echo "Checking cache directory structure..."
      ls -la /opt/render/.cache/puppeteer/ 2>/dev/null || echo "Cache directory not found"
      ls -la /opt/render/.cache/puppeteer/chrome/ 2>/dev/null || echo "Chrome directory not found"

      echo "Finding all Chrome binaries..."
      find /opt/render/.cache/puppeteer/ -name "chrome" -type f 2>/dev/null || echo "No Chrome binaries found in cache"

      echo "Checking system browsers..."
      which chromium-browser 2>/dev/null && echo "Found chromium-browser" || echo "chromium-browser not found"
      which chromium 2>/dev/null && echo "Found chromium" || echo "chromium not found"
      which google-chrome-stable 2>/dev/null && echo "Found google-chrome-stable" || echo "google-chrome-stable not found"
      which google-chrome 2>/dev/null && echo "Found google-chrome" || echo "google-chrome not found"

      echo "=== Creating Symlinks for Compatibility ==="
      # Create symlinks to ensure compatibility
      if [ -f "/usr/bin/chromium-browser" ]; then
        ln -sf /usr/bin/chromium-browser /usr/bin/chromium 2>/dev/null || echo "Symlink creation failed"
      fi

      if [ -f "/usr/bin/google-chrome-stable" ]; then
        ln -sf /usr/bin/google-chrome-stable /usr/bin/google-chrome 2>/dev/null || echo "Symlink creation failed"
      fi

      echo "=== Final Verification ==="
      echo "Available browsers:"
      ls -la /usr/bin/*chrom* 2>/dev/null || echo "No chromium browsers in /usr/bin"
      ls -la /opt/render/.cache/puppeteer/chrome/ 2>/dev/null || echo "No puppeteer chrome versions"

      echo "=== Build Complete ==="
    startCommand: npm start
    envVars:
      - key: PUPPETEER_CACHE_DIR
        value: /opt/render/.cache/puppeteer
      - key: PUPPETEER_SKIP_CHROMIUM_DOWNLOAD
        value: false
      - key: BROWSER_POOL_SIZE
        value: 1
      - key: MAX_CONCURRENT_REQUESTS
        value: 2
      - key: PAGE_LOAD_TIMEOUT
        value: 60000
      - key: IDLE_TIMEOUT
        value: 1800000
      - key: NODE_ENV
        value: production
      - key: RENDER
        value: true
    healthCheckPath: /health
    autoDeploy: true
